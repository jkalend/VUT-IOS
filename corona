#!/bin/bash

POSIXLY_CORRECT=yes


# TODO:validate logs, histogram, finish help, rewrite stderr, rewrite ERRORS

sizearg=0
file=""
FILE=""
args=("$@")
HEADPRINT=true
COMMAND=0
AFTER=0
BEFORE=0
GENDER=0
WIDTH=0
HIST=0
declare -a DEFS=(100000 10000 500 10000 100000 100 1000 10000)

declare -A COMMANDS=(
    [infected]=1
    [merge]=2
    [gender]=3
    [age]=4
    [daily]=5
    [monthly]=6
    [yearly]=7
    [countries]=8
    [districts]=9
    [regions]=10
)

declare -A FILTERS=(
    [after]=""
    [before]=""
    [gender]=""
    [width]=-1
)

declare -A COUNTRIES

# 6f4125cb-fb41-4fb0-a478-07b69ba106a4,2020-03-01,21,Z,CZ010,CZ0100,1,IT,1

validate () {
    valdate
    valage
}
# [0-9]{4}-[0]{1}[1-9]{1}-[0]{1}[1-9]{1}|[0-9]{4}-[0]{1}[1-9]{1}-[1]{1}[1-9]{1}|[0-9]{4}-[0]{1}[12-8]{1}-[1]{1}[1-9]{1}
#^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$
valdate () { 

    FILE=$(echo -e "$FILE" | awk -F, ' NR==1{print $0; next}  $2 !~ /(^((([0-9][0-9])(([02468][048])|([13579][26]))-02-29)|((([0-9][0-9])([0-9][0-9])))-((((0[0-9])|(1[0-2]))-((0[0-9])|(1[0-9])|(2[0-8])))|((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29|30)))))$)/{print $0 | "cat 1>&2"}
    $2 ~ /(^((([0-9][0-9])(([02468][048])|([13579][26]))-02-29)|((([0-9][0-9])([0-9][0-9])))-((((0[0-9])|(1[0-2]))-((0[0-9])|(1[0-9])|(2[0-8])))|((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29|30)))))$)/{print $0}')

}

valage() {
    FILE=$(echo -e "$FILE" | awk -F, 'NR==1{print $0; next} $3 ~ /^[0-9]+$/||$3==""{print $0} $3 !~ /^[0-9]+$/&&$3!=""{print $0 | "cat 1>&2"}')
}


cross () { 
    case $COMMAND in
    0) 
        echo -e "$FILE"
    ;;
    1)
        infected
    ;;
    2) 
        echo -e "$FILE"
    ;;
    3) 
        gender
        
    ;;
    4) 
        age
        
    ;;
    5) 
        daily
        
    ;;
    6)
        monthly
        
    ;;
    7)
        yearly
        
    ;;
    8)
        countries
        
    ;;
    9)
        districts
        
    ;;
    10) 
        regions
        
    ;;
    *) 
    echo "ERROR: Unknown command"
    exit 1;;

    esac 

}

filters () {
    if [ "${FILTERS[after]}" != "" ]; then
        after
    fi
    if [ "${FILTERS[before]}" != "" ]; then
        before
    fi
    if [ "${FILTERS[gender]}" != "" ]; then
        gender_filter
    fi
}

after () { 
    FILE=$(echo -e "$FILE" | awk -v after="${FILTERS[after]}" -F, 'NR==1{print $0} after<=$2 && $2!="datum"{print $0} ')
}

before () {
    FILE=$(echo -e "$FILE" | awk -v before="${FILTERS[before]}" -F, 'NR==1{print $0} before>=$2 && $2!="datum"{print $0}')
}

gender_filter () {
    FILE=$(echo -e "$FILE" | awk -v gender="${FILTERS[gender]}" -F, 'NR==1{print $0} $4==gender{print $0} ')
}



merge () {
    nl="\n" 
    if [ $HEADPRINT == true ]; then
        FILE="${file}"
    else
        file=$(echo -e "$file" | tail -n +2)
        FILE="${FILE}${nl}${file}"
    fi
    echo -e "$FILE"
}

infected () {

    echo -e "$FILE" | awk -F, 'BEGIN{COUNT=0} NR==1{next} {COUNT++} END{print COUNT}'

}

gender () {
    m=$(echo -e "$FILE" | awk -F,  'BEGIN{COUNT=0} NR==1{next} $4=="M"{COUNT++} END{print COUNT}')

    z=$(echo -e "$FILE" | awk -F,  'BEGIN{COUNT=0} NR==1{next} $4=="Z"{COUNT++} END{print COUNT} ')

    none=$(echo -e "$FILE" | awk -F,  'BEGIN{COUNT=0} NR==1{next} $4==""{COUNT++} END{print COUNT} ')

    awk -v M="$m" -v Z="$z" -v N="$none" -v hist="$HIST" -v max="${FILTERS[width]}" 'BEGIN{if (hist==0) {print "M   : "M; print "Z   : "Z; print "None: "N}
    else if (hist==1 && max==-1) {COUNT=int(M/100000); HASH=sprintf("%"COUNT"s",""); gsub(" ","#",HASH); print "M   : "HASH;
                                COUNT=int(Z/100000); HASH=sprintf("%"COUNT"s",""); gsub(" ","#",HASH); print "Z   : "HASH;
                                COUNT=int(N/100000); HASH=sprintf("%"COUNT"s",""); gsub(" ","#",HASH); print "None: "HASH} 
    else if (hist==1 && max!=-1) {MAXX=0; arr[0]=M; arr[1]=Z; arr[2]=N; for (i=0; i<3; i++) {MAXX = (MAXX < arr[i]) ? arr[i] : MAXX}
                                DIV=MAXX/max
                                COUNT=int(M/DIV); HASH=sprintf("%"COUNT"s",""); gsub(" ","#",HASH); print "M   : "HASH;
                                COUNT=int(Z/DIV); HASH=sprintf("%"COUNT"s",""); gsub(" ","#",HASH); print "Z   : "HASH;
                                COUNT=int(N/DIV); HASH=sprintf("%"COUNT"s",""); gsub(" ","#",HASH); print "None: "HASH} }'
}

age () {
    echo -e "$FILE" | awk -F, 'BEGIN{COUNT=0} NR==1{next} $3<=5 && $3>=0{COUNT++} END{print "0-5   : "COUNT}'
    echo -e "$FILE" | awk -F, 'BEGIN{COUNT=0} NR==1{next} $3<=15 && $3>=6{COUNT++} END{print "6-15  : "COUNT}'
    echo -e "$FILE" | awk -F, 'BEGIN{COUNT=0} NR==1{next} $3<=25 && $3>=16{COUNT++} END{print "16-25 : "COUNT}'
    echo -e "$FILE" | awk -F, 'BEGIN{COUNT=0} NR==1{next} $3<=35 && $3>=26{COUNT++} END{print "26-35 : "COUNT}'
    echo -e "$FILE" | awk -F, 'BEGIN{COUNT=0} NR==1{next} $3<=45 && $3>=36{COUNT++} END{print "36-45 : "COUNT}'
    echo -e "$FILE" | awk -F, 'BEGIN{COUNT=0} NR==1{next} $3<=55 && $3>=46{COUNT++} END{print "46-55 : "COUNT}'
    echo -e "$FILE" | awk -F, 'BEGIN{COUNT=0} NR==1{next} $3<=65 && $3>=56{COUNT++} END{print "56-65 : "COUNT}'
    echo -e "$FILE" | awk -F, 'BEGIN{COUNT=0} NR==1{next} $3<=75 && $3>=66{COUNT++} END{print "66-75 : "COUNT}'
    echo -e "$FILE" | awk -F, 'BEGIN{COUNT=0} NR==1{next} $3<=85 && $3>=76{COUNT++} END{print "76-85 : "COUNT}'
    echo -e "$FILE" | awk -F, 'BEGIN{COUNT=0} NR==1{next} $3<=95 && $3>=86{COUNT++} END{print "86-95 : "COUNT}'
    echo -e "$FILE" | awk -F, 'BEGIN{COUNT=0} NR==1{next} $3<=105 && $3>=96{COUNT++} END{print "96-105: "COUNT}'
    echo -e "$FILE" | awk -F, 'BEGIN{COUNT=0} NR==1{next} $3>=105{COUNT++} END{print ">105  : "COUNT}'
    echo -e "$FILE" | awk -F, 'BEGIN{COUNT=0} NR==1{next} $3==""{COUNT++} END{if(COUNT != 0) {print "None  : "COUNT}}'

}

daily () { 
    
    echo -e "$FILE" | awk -F, 'BEGIN{COUNT=0; NONE=0; PRV=""} NR==1{next} NR==2{PRV=$2} $2==""{NONE++} PRV==$2{COUNT++} 
    PRV!=$2{print PRV": "COUNT; COUNT=1; PRV=$2} END{if (PRV!=""){print PRV": "COUNT}; if (NONE != 0){print "None: "NONE}}'

}

monthly () { 
    
    echo -e "$FILE" | awk -F, 'BEGIN{COUNT=0; NONE=0; PRV=""} NR==1{next} NR==2{PRV=substr($2,1,7)} PRV==substr($2,1,7){COUNT++} 
    PRV!=substr($2,1,7){print PRV": "COUNT; COUNT=1; PRV=substr($2,1,7)} END{if (PRV!=""){print PRV": "COUNT}; if (NONE != 0){print "None: "NONE}}'
}

yearly() {
    echo -e "$FILE" | awk -F, 'BEGIN{COUNT=0; NONE=0; PRV=""} NR==1{next} NR==2{PRV=substr($2,1,4)} PRV==substr($2,1,4){COUNT++} 
    PRV!=substr($2,1,4){print PRV": "COUNT; COUNT=1; PRV=substr($2,1,4)} END{if (PRV!=""){print PRV": "COUNT}; if (NONE != 0){print "None: "NONE}}'
}

districts () {
    echo -e "$FILE" | awk -F, 'BEGIN{COUNTRIES["None"]=0} NR==1{next} $6==""{COUNTRIES["None"]++} $6!=""{COUNTRIES[$6]+=1}
     END{if (COUNTRIES["None"]==0) {delete(COUNTRIES["None"])}; for (i in COUNTRIES) print i": "COUNTRIES[i]}' | sort
}

regions () {
    echo -e "$FILE" | awk -F, 'BEGIN{COUNTRIES["None"]=0} NR==1{next} $5==""{COUNTRIES["None"]++} $5!=""{COUNTRIES[$5]+=1}
     END{if (COUNTRIES["None"]==0) {delete(COUNTRIES["None"])}; for (i in COUNTRIES) print i": "COUNTRIES[i]}' | sort
}


argz="" #not needed?
#look for help 
while getopts ha:b:g:s: options; do
        case $options in
                h) 
                continue
                ;;

                a)
                continue
                ;;

                b) 
                continue
                ;;

                g) 
                continue
                ;;

                s)
                continue
                ;;

                ?) 
                exit 1
                ;;
        esac
done


for i in "${args[@]}"
do

    if [[ $i == "-h" ]]; then
        echo "HELP"
        exit 1
    fi

    if [[ $i == "-a" ]]; then
        AFTER=1
        continue
    fi
    

    if [[ $AFTER == 1 ]]; then
        if [ "${FILTERS[after]}" != "" ];
            then
            echo "Error: Too many flags of the same type" >&2
            exit 1
        fi

        tmp=$(echo -e "$i" | awk -F, '$0 ~ /(^((([0-9][0-9])(([02468][048])|([13579][26]))-02-29)|((([0-9][0-9])([0-9][0-9])))-((((0[0-9])|(1[0-2]))-((0[0-9])|(1[0-9])|(2[0-8])))|((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29|30)))))$)/{print $0}')
        if [[ $tmp == "" ]]; then
            echo "Error6"
            exit 1
        fi
        FILTERS[after]=$i
        AFTER=0
        continue
    fi

    if [[ $i == "-b" ]]; then
        BEFORE=1
        continue
    fi

    if [[ $BEFORE == 1 ]]; then
        if [ "${FILTERS[before]}" != "" ];
        then
            echo "Error: Too many flags of the same type" >&2
            exit 1  
        fi
        
        tmp=$(echo -e "$i" | awk -F, '$0 ~ /(^((([0-9][0-9])(([02468][048])|([13579][26]))-02-29)|((([0-9][0-9])([0-9][0-9])))-((((0[0-9])|(1[0-2]))-((0[0-9])|(1[0-9])|(2[0-8])))|((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29|30)))))$)/{print $0}')
        if [[ $tmp == "" ]]; then
            echo "Error7"
            exit 1
        fi
        FILTERS[before]=$i
        BEFORE=0
        continue
    fi

    if [[ $i == "-g" ]]; then
        GENDER=1
        continue
    fi

    if [[ $GENDER == 1 ]]; then
        if [ "${FILTERS[gender]}" != "" ];
        then
            echo "Error: Too many flags of the same type" >&2
            exit 1
        fi

        tmp=$(echo -e "$i" | awk -F, '$0 ~ /^[M]{1}$|^[Z]{1}$/{print $0}')
        if [[ $tmp == "" ]]; then
            echo "Error8"
            exit 1
        fi
        FILTERS[gender]=$i
        GENDER=0
        continue
    fi

    if [[ $i == "-s" ]]; then
        WIDTH=1
        HIST=1
        continue
    fi

    if [[ $WIDTH == 1 ]]; then
        goodinput=0 
        if [ "${FILTERS[width]}" != -1 ];
        then
        echo "Error: Too many flags of the same type" >&2
        exit 1
        fi

        if ! [ -f "$i" ];
        then
            for j in "${!COMMANDS[@]}"
            do
                if [[ "$i" == "$j" ]]; then
                    goodinput=1
                    WIDTH=0
                    break
                fi
            done
            if [[ $goodinput == 0 ]]; then
                tmp=$(echo -e "$i" | awk -F, '$0 ~ /^[1-9][0-9]?+$/{print $0}')
                if [[ "$tmp" == "" ]]; then
                    echo "Error9"
                    exit 1
                fi
                FILTERS[width]=$i
                WIDTH=0 
                continue
            fi
        else
            WIDTH=0
            continue
        fi
    fi

    if ! [ -f "$i" ];
    then
        if [ "$FILE" != "" ]; then 
            echo "Error10"
            exit 1
        fi
        for j in "${!COMMANDS[@]}"
        do
            if [[ $j == $i  &&  $COMMAND -eq 0 ]];
            then
                COMMAND=${COMMANDS[$j]}
                break
            fi

            if ! [ $COMMAND -eq 0 ];
            then
                echo "Too many COMMANDS, maximum 1 allowed" >&2
                exit 1
            fi
        done
        continue
    fi

    if [ -f $i ];
    then
        if [[ "$i" == *.csv ]]; then
            file=$(cat "$i")
            merge > /dev/null
            HEADPRINT=false
        fi
        if [[ "$i" == *.gz ]]; then
            file=$(gzip -dkc "$i")
            merge > /dev/null
            HEADPRINT=false
        fi
        if [[ "$i" == *.bz2 ]]; then
            file=$(bzip2 -dkc "$i")
            merge > /dev/null
            HEADPRINT=false
        fi
    fi
done

if [[ $file == "" ]]; 
then
file=$(cat -)
merge > /dev/null
validate
filters
cross
exit 0
fi

validate
filters
cross